
package com.mycompany.libraryswing;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.AbstractListModel;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JList;

import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.LayoutStyle;
import javax.swing.WindowConstants;
import com.mycompany.model.Book;
import com.mycompany.model.Library;
import com.mycompany.model.Reader;
import java.util.ArrayList;

import java.util.List;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;


/**
 *
 * @author Ellina
 */
public class LibraryGui extends javax.swing.JFrame {

    private Library l;
    private BookTableModel tmb;
    private ListModelUsersBooks lmbr;
    private Sort sort;
//    private List<Book> showBooks;

    /**
     * Creates new form LibraryGui
     */
    public LibraryGui() {
        this.l = new Library();
        l.generatorList(20, 10);
        l.getListBooks().forEach(b -> System.out.println(b.toString()));
        this.sort = Sort.WITHOUT_SORT;
        tmb = new BookTableModel(l.getListBooks());
        lmbr = new ListModelUsersBooks(l.getListBooks());

        initComponents();
        SwingTools.centerOnScreen(0, this);

        buttonGenerate.setEnabled(false);
        callDialog();
//        lmbr = new ListModelBooksInLibrary(l.getUsersBook(l.getCurrentReader()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonSort = new ButtonGroup();
        jLabel1 = new JLabel();
        labelReaderTitle = new JLabel();
        jScrollPane2 = new JScrollPane();
        listUsersBook = new JList<>();
        buttonReturnBook = new JButton();
        buttonChangeUser = new JButton();
        radioButtonWithoutSort = new JRadioButton();
        radioButtonSortAut = new JRadioButton();
        radioButtonSortGenre = new JRadioButton();
        buttonGenerate = new JButton();
        buttonExit = new JButton();
        jScrollPane1 = new JScrollPane();
        tableBooks = new JTable();
        buttonBorrow = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Library");

        jLabel1.setText("Reader:");

        listUsersBook.setModel(lmbr);
        jScrollPane2.setViewportView(listUsersBook);

        buttonReturnBook.setText("Zur√ºckgeben");
        buttonReturnBook.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonReturnBookActionPerformed(evt);
            }
        });

        buttonChangeUser.setText("Benutzer wechseln");
        buttonChangeUser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonChangeUserActionPerformed(evt);
            }
        });

        buttonSort.add(radioButtonWithoutSort);
        radioButtonWithoutSort.setSelected(true);
        radioButtonWithoutSort.setText("Ohne Sortierung");
        radioButtonWithoutSort.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                radioButtonWithoutSortActionPerformed(evt);
            }
        });

        buttonSort.add(radioButtonSortAut);
        radioButtonSortAut.setText("Sortierung nach Autor");
        radioButtonSortAut.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                radioButtonSortAutActionPerformed(evt);
            }
        });

        buttonSort.add(radioButtonSortGenre);
        radioButtonSortGenre.setText("Sortierung nach Genre");
        radioButtonSortGenre.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                radioButtonSortGenreActionPerformed(evt);
            }
        });

        buttonGenerate.setText("Library generieren");
        buttonGenerate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonGenerateActionPerformed(evt);
            }
        });

        buttonExit.setText("Exit");
        buttonExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });

        tableBooks.setModel(tmb);
        tableBooks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(tableBooks);

        buttonBorrow.setText("Book mitnehmen");
        buttonBorrow.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                buttonBorrowActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelReaderTitle, GroupLayout.PREFERRED_SIZE, 610, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(buttonChangeUser, GroupLayout.PREFERRED_SIZE, 149, GroupLayout.PREFERRED_SIZE)
                            .addComponent(buttonReturnBook, GroupLayout.PREFERRED_SIZE, 149, GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(buttonGenerate, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonExit, GroupLayout.Alignment.TRAILING, GroupLayout.PREFERRED_SIZE, 141, GroupLayout.PREFERRED_SIZE))
                            .addComponent(radioButtonSortGenre)
                            .addComponent(radioButtonSortAut)
                            .addComponent(radioButtonWithoutSort))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(buttonBorrow, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(labelReaderTitle, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 122, GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(buttonChangeUser)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonReturnBook)))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(radioButtonWithoutSort)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonSortAut)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioButtonSortGenre)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonBorrow, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonGenerate)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonExit))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioButtonWithoutSortActionPerformed(ActionEvent evt) {//GEN-FIRST:event_radioButtonWithoutSortActionPerformed

          tmb.getBooksInTable(l.getListBooks());
    }//GEN-LAST:event_radioButtonWithoutSortActionPerformed

    private void radioButtonSortAutActionPerformed(ActionEvent evt) {//GEN-FIRST:event_radioButtonSortAutActionPerformed

        tmb.sortAutor();
    }//GEN-LAST:event_radioButtonSortAutActionPerformed


    private void buttonExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_buttonExitActionPerformed

    private void buttonGenerateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonGenerateActionPerformed

        l.generatorList(20, 10);
        l.getListBooks().forEach(b -> System.out.println(b.toString()));
        tmb.getBooksInTable(l.getListBooks());
        //.setEnabled(true);

    }//GEN-LAST:event_buttonGenerateActionPerformed

    private void radioButtonSortGenreActionPerformed(ActionEvent evt) {//GEN-FIRST:event_radioButtonSortGenreActionPerformed

        tmb.sortGenre();
    }//GEN-LAST:event_radioButtonSortGenreActionPerformed

    private void buttonChangeUserActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonChangeUserActionPerformed
        callDialog();
    }//GEN-LAST:event_buttonChangeUserActionPerformed

    private void buttonReturnBookActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonReturnBookActionPerformed
        if (listUsersBook.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(LibraryGui.this, "Kein Buch gew√§hlt");
        } else {
            Book b = lmbr.getElementAt(listUsersBook.getSelectedIndex());
            System.out.println(b.toString());
            b.setReader(null);
            lmbr.getBooksInList(l.getUsersBook(l.getCurrentReader()));
            tmb.getBooksInTable(l.getListBooks());
            
            JOptionPane.showMessageDialog(LibraryGui.this, b.toStringKurz() + " wurde im Bibliothek zur√ºckgegeben");
        }
    }//GEN-LAST:event_buttonReturnBookActionPerformed

    private void buttonBorrowActionPerformed(ActionEvent evt) {//GEN-FIRST:event_buttonBorrowActionPerformed
        if (tableBooks.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(LibraryGui.this, "Kein Buch gew√§hlt");
        } else {
            Book b = tmb.getBook(tableBooks.getSelectedRow());
            b.setReader(l.getCurrentReader());
            System.out.println(b.toString());
            tmb.getBooksInTable(l.getListBooks());
            lmbr.getBooksInList(l.getUsersBook(l.getCurrentReader()));
            JOptionPane.showMessageDialog(LibraryGui.this, b.toStringKurz() + " wurde genommen");
        }


    }//GEN-LAST:event_buttonBorrowActionPerformed

    private void callDialog() {
        UserChoiceDialog userChoiceDialog = new UserChoiceDialog(this, this.l);

        Reader curReader = userChoiceDialog.showDialog();

        if (curReader != null) {
            labelReaderTitle.setText(curReader.getLogin());
            lmbr.getBooksInList(l.getUsersBook(curReader));
        }

    }
    
    private void showBooksInLibrary(){
        
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LibraryGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LibraryGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LibraryGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LibraryGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LibraryGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton buttonBorrow;
    private JButton buttonChangeUser;
    private JButton buttonExit;
    private JButton buttonGenerate;
    private JButton buttonReturnBook;
    private ButtonGroup buttonSort;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JLabel labelReaderTitle;
    private JList<Book> listUsersBook;
    private JRadioButton radioButtonSortAut;
    private JRadioButton radioButtonSortGenre;
    private JRadioButton radioButtonWithoutSort;
    private JTable tableBooks;
    // End of variables declaration//GEN-END:variables

  class ListModelBooksInLibrary extends AbstractListModel<Book> {

        private List<Book> listBooks;

        public ListModelBooksInLibrary() {
            listBooks = new ArrayList<>();
            listBooks = l.getListBooks();

        }

        public ListModelBooksInLibrary(List<Book> listBooks) {
            this.listBooks = listBooks;
        }

        @Override
        public int getSize() {
            return listBooks.size();
        }

        @Override
        public Book getElementAt(int index) {
            return listBooks.get(index);
        }

        public void getBooksInList(List<Book> books) {
            listBooks = books;
            fireContentsChanged(this, 0, getSize());
        }

    }  

}
enum Sort
{
    WITHOUT_SORT,
    AUTHOR_SORT,
    GENRE_SORT
}